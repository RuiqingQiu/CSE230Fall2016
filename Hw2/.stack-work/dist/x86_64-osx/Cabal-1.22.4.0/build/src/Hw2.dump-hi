
==================== FINAL INTERFACE ====================
2016-10-26 22:15:51.711599 UTC

interface Hw2_2vU6yhTiA8DHLkm2WjVPHM:Hw2 7102
  interface hash: 20663487d95b68ae9adacc20ea443f39
  ABI hash: 221aea75ddb8c2704255e2ccf4ed1ff9
  export-list hash: efe92585e8e104e6b85e76df970d2c82
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 71f41807a349896454857da096988d4b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hw2.boolP
  Hw2.constP
  Hw2.delete
  Hw2.evalE
  Hw2.evalOp
  Hw2.evalS
  Hw2.execS
  Hw2.exprP
  Hw2.intP
  Hw2.myEmail
  Hw2.myFoldl
  Hw2.myFoldl2
  Hw2.myFoldr
  Hw2.myName
  Hw2.myReverse
  Hw2.mySID
  Hw2.opP
  Hw2.run
  Hw2.runFile
  Hw2.statementP
  Hw2.valueP
  Hw2.varP
  Hw2.w_fact
  Hw2.w_test
  Hw2.BST{Hw2.Bind Hw2.Emp}
  Hw2.Bop{Hw2.Divide Hw2.Ge Hw2.Gt Hw2.Le Hw2.Lt Hw2.Minus Hw2.Plus Hw2.Times}
  Hw2.Expression{Hw2.Op Hw2.Val Hw2.Var}
  Hw2.Statement{Hw2.Assign Hw2.If Hw2.Sequence Hw2.Skip Hw2.While}
  Hw2.Store
  Hw2.Value{Hw2.BoolVal Hw2.IntVal}
  Hw2.Variable
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
import  -/  base-4.8.1.0:Control.Applicative a283901553892ce761385d18e455c2ce
import  -/  base-4.8.1.0:Data.Either bc9482e78cc431fce439b593377aa2e6
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO 29a6f3d7c8ad8a4e6200d8bbb6e70aae
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map 5e4cbf1ca2e6c8cfaecf2b4e95371357
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base 7ea108dc1481cad0b32efe810e49ad43
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.State d96af44e8d2501342f4d849385ed921c
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec c0bc06fb0aaf9f07c9c990b6feda62a0
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Char afe4c37d8611a25041c84760b717c602
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Combinator 69f5c1efe41ef6c39f8bbae8eebb0a80
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Prim 285cde77b6b24df2175f0525c84910d8
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.String 4b7d1159848b56228c8c8ce8ab90dc5a
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.State.Lazy c08c12a521658e8ac939bca69680ffbc
0c43ee5758b8c80297770871b3c6a92b
  $fShowBST ::
    (GHC.Show.Show k, GHC.Show.Show v) => GHC.Show.Show (Hw2.BST k v)
  DFunId[0]
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ k
                      @ v
                      $dShow :: GHC.Show.Show k
                      $dShow1 :: GHC.Show.Show v.
                  @ (Hw2.BST k v)
                  (Hw2.$fShowBST_$cshowsPrec @ k @ v $dShow $dShow1)
                  (Hw2.$fShowBST_$cshow @ k @ v $dShow $dShow1)
                  (Hw2.$fShowBST_$cshowList @ k @ v $dShow $dShow1) -}
90450a8cfd791be31597acd20d9cfe19
  $fShowBST1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
0c43ee5758b8c80297770871b3c6a92b
  $fShowBST_$cshow ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    Hw2.BST k v -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ v
                   $dShow :: GHC.Show.Show k
                   $dShow1 :: GHC.Show.Show v
                   x :: Hw2.BST k v ->
                 Hw2.$fShowBST_$cshowsPrec
                   @ k
                   @ v
                   $dShow
                   $dShow1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c43ee5758b8c80297770871b3c6a92b
  $fShowBST_$cshowList ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    [Hw2.BST k v] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ v
                   $dShow :: GHC.Show.Show k
                   $dShow1 :: GHC.Show.Show v
                   eta :: [Hw2.BST k v]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Hw2.BST k v)
                   (Hw2.$fShowBST_$cshowsPrec @ k @ v $dShow $dShow1 Hw2.$fShowBST1)
                   eta
                   eta1) -}
0c43ee5758b8c80297770871b3c6a92b
  $fShowBST_$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show v) =>
    GHC.Types.Int -> Hw2.BST k v -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
217e45e4cb68933a834e295d84564493
  $fShowBop :: GHC.Show.Show Hw2.Bop
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw2.Bop
                  Hw2.$fShowBop_$cshowsPrec
                  Hw2.$fShowBop_$cshow
                  Hw2.$fShowBop_$cshowList -}
38c642763767eaed31d2901db8d286b9
  $fShowBop1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Le"#) -}
1f0a2bff46e58460fb49930aeaf753b8
  $fShowBop2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Lt"#) -}
db3ef161bdcffa3a326bbc81ea10db42
  $fShowBop3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ge"#) -}
6231a88f43a5cddb1d53af4a019c132c
  $fShowBop4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Gt"#) -}
b884419d4b56b12f272f2040912e54dc
  $fShowBop5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Divide"#) -}
f0a6492db2c9ab66de642532c848894d
  $fShowBop6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Times"#) -}
8ea236d794364ee0c93ae840ba0c7183
  $fShowBop7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Minus"#) -}
b6c91f97bc59bdf11f6888cd62608683
  $fShowBop8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Plus"#) -}
217e45e4cb68933a834e295d84564493
  $fShowBop_$cshow :: Hw2.Bop -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw2.Bop ->
                 Hw2.$fShowBop_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
217e45e4cb68933a834e295d84564493
  $fShowBop_$cshowList :: [Hw2.Bop] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Hw2.Bop Hw2.$w$cshowsPrec) -}
217e45e4cb68933a834e295d84564493
  $fShowBop_$cshowsPrec :: GHC.Types.Int -> Hw2.Bop -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: Hw2.Bop w2 :: GHC.Base.String ->
                 Hw2.$w$cshowsPrec w1 w2) -}
2c901e490f31449161e4867b35bf3fb9
  $fShowExpression :: GHC.Show.Show Hw2.Expression
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw2.Expression
                  Hw2.$fShowExpression_$cshowsPrec
                  Hw2.$fShowExpression_$cshow
                  Hw2.$fShowExpression_$cshowList -}
2c901e490f31449161e4867b35bf3fb9
  $fShowExpression1 :: Hw2.Expression -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Hw2.Expression w1 :: GHC.Base.String ->
                 Hw2.$w$cshowsPrec1 0 w w1) -}
2c901e490f31449161e4867b35bf3fb9
  $fShowExpression_$cshow :: Hw2.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw2.Expression ->
                 Hw2.$fShowExpression_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2c901e490f31449161e4867b35bf3fb9
  $fShowExpression_$cshowList :: [Hw2.Expression] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Hw2.Expression
                   Hw2.$fShowExpression1) -}
2c901e490f31449161e4867b35bf3fb9
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> Hw2.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Hw2.Expression w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Hw2.$w$cshowsPrec1 ww1 w1 w2 }) -}
65302448e87418a9a1ed2f74f74fc528
  $fShowStatement :: GHC.Show.Show Hw2.Statement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw2.Statement
                  Hw2.$fShowStatement_$cshowsPrec
                  Hw2.$fShowStatement_$cshow
                  Hw2.$fShowStatement_$cshowList -}
65302448e87418a9a1ed2f74f74fc528
  $fShowStatement1 :: Hw2.Statement -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Hw2.$fShowStatement_$cshowsPrec Hw2.$fShowBST1) -}
65302448e87418a9a1ed2f74f74fc528
  $fShowStatement_$cshow :: Hw2.Statement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw2.Statement ->
                 Hw2.$fShowStatement_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
65302448e87418a9a1ed2f74f74fc528
  $fShowStatement_$cshowList :: [Hw2.Statement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Hw2.Statement
                   Hw2.$fShowStatement1) -}
65302448e87418a9a1ed2f74f74fc528
  $fShowStatement_$cshowsPrec ::
    GHC.Types.Int -> Hw2.Statement -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
718ebaa6a5470ede701e24a3578989c0
  $fShowValue :: GHC.Show.Show Hw2.Value
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hw2.Value
                  Hw2.$fShowValue_$cshowsPrec
                  Hw2.$fShowValue_$cshow
                  Hw2.$fShowValue_$cshowList -}
718ebaa6a5470ede701e24a3578989c0
  $fShowValue1 :: Hw2.Value -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Hw2.Value w1 :: GHC.Base.String ->
                 Hw2.$w$cshowsPrec2 0 w w1) -}
0c09eb4c189257a8d6bf4dc1cd954424
  $fShowValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BoolVal "#) -}
49b9d1d54eb7354d96573251009f292e
  $fShowValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IntVal "#) -}
718ebaa6a5470ede701e24a3578989c0
  $fShowValue_$cshow :: Hw2.Value -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Hw2.Value ->
                 Hw2.$fShowValue_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
718ebaa6a5470ede701e24a3578989c0
  $fShowValue_$cshowList :: [Hw2.Value] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Hw2.Value Hw2.$fShowValue1) -}
718ebaa6a5470ede701e24a3578989c0
  $fShowValue_$cshowsPrec ::
    GHC.Types.Int -> Hw2.Value -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Hw2.Value w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Hw2.$w$cshowsPrec2 ww1 w1 w2 }) -}
217e45e4cb68933a834e295d84564493
  $w$cshowsPrec :: Hw2.Bop -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Hw2.Bop w1 :: GHC.Base.String ->
                 case w of wild {
                   Hw2.Plus -> GHC.Base.++ @ GHC.Types.Char Hw2.$fShowBop8 w1
                   Hw2.Minus -> GHC.Base.++ @ GHC.Types.Char Hw2.$fShowBop7 w1
                   Hw2.Times -> GHC.Base.++ @ GHC.Types.Char Hw2.$fShowBop6 w1
                   Hw2.Divide -> GHC.Base.++ @ GHC.Types.Char Hw2.$fShowBop5 w1
                   Hw2.Gt -> GHC.Base.++ @ GHC.Types.Char Hw2.$fShowBop4 w1
                   Hw2.Ge -> GHC.Base.++ @ GHC.Types.Char Hw2.$fShowBop3 w1
                   Hw2.Lt -> GHC.Base.++ @ GHC.Types.Char Hw2.$fShowBop2 w1
                   Hw2.Le -> GHC.Base.++ @ GHC.Types.Char Hw2.$fShowBop1 w1 }) -}
2c901e490f31449161e4867b35bf3fb9
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Hw2.Expression -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0] -}
718ebaa6a5470ede701e24a3578989c0
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> Hw2.Value -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: Hw2.Value
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   Hw2.IntVal b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Hw2.$fShowValue3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11 ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Hw2.$fShowValue3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows8
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }
                   Hw2.BoolVal b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Hw2.$fShowValue2
                            (case b1 of wild1 {
                               GHC.Types.False -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x
                               GHC.Types.True
                               -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows16 x })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p w1
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1)) } }) -}
c65107fc350f4d866652320fae4e727f
  $wa ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Hw2.run4
                        GHC.Types.True
                        w of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Hw2.run2
                   GHC.Types.True
                   ipv }) -}
783120549678ed9572c87bd3012845f2
  $wa1 :: GHC.Prim.Void# -> Data.Functor.Identity.Identity b
  {- Arity: 1, Strictness: <L,U>b, Inline: [0] -}
0c43ee5758b8c80297770871b3c6a92b
  data BST k v = Emp | Bind k v (Hw2.BST k v) (Hw2.BST k v)
    Promotable
217e45e4cb68933a834e295d84564493
  data Bop = Plus | Minus | Times | Divide | Gt | Ge | Lt | Le
    Promotable
2c901e490f31449161e4867b35bf3fb9
  data Expression
    = Var Hw2.Variable
    | Val Hw2.Value
    | Op Hw2.Bop Hw2.Expression Hw2.Expression
65302448e87418a9a1ed2f74f74fc528
  data Statement
    = Assign Hw2.Variable Hw2.Expression
    | If Hw2.Expression Hw2.Statement Hw2.Statement
    | While Hw2.Expression Hw2.Statement
    | Sequence Hw2.Statement Hw2.Statement
    | Skip
ddc08bb528114b92cdded30ed295cf60
  type Store = Data.Map.Base.Map Hw2.Variable Hw2.Value
718ebaa6a5470ede701e24a3578989c0
  data Value = IntVal GHC.Types.Int | BoolVal GHC.Types.Bool
12d3420852695a0207f1835570ac1256
  type Variable = GHC.Base.String
5e867bc67b3d30d63a4ad564500ec43b
  boolP :: Text.Parsec.String.Parser Hw2.Value
  {- Strictness: b -}
39aa53a33bedac76b9cd2d6ce3772763
  constP :: GHC.Base.String -> a -> Text.Parsec.String.Parser a
  {- Arity: 2, Strictness: <B,A><B,A>b,
     Unfolding: InlineRule (2, True, True)
                (\ @ a1 s :: GHC.Base.String x :: a1 -> Hw2.constP1 @ a1) -}
fd044b2c00d3d33fade277f6b97dfe4d
  constP1 :: Text.Parsec.String.Parser a
  {- Strictness: b -}
63f3441773fe8bd9f7ed606a6b47b9d9
  delete :: GHC.Classes.Ord k => k -> Hw2.BST k v -> Hw2.BST k v
  {- Arity: 3, Strictness: <B,A><B,A><B,A>b,
     Unfolding: InlineRule (3, True, True)
                (\ @ k @ v $dOrd :: GHC.Classes.Ord k k1 :: k t :: Hw2.BST k v ->
                 Hw2.delete1 @ k @ v) -}
cfd5c1ba0ecbf8a28f906de060f6bd66
  delete1 :: Hw2.BST k v
  {- Strictness: b -}
100dd19717135ed08b9b7c073ff852e1
  evalE ::
    Hw2.Expression
    -> Control.Monad.Trans.State.Lazy.State Hw2.Store Hw2.Value
  {- Arity: 1, Strictness: <B,1*U>b,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Hw2.Expression ->
                 case ds of wild { DEFAULT -> Hw2.evalE1 }) -}
bb8ecedf11fbb33500468111b6830b15
  evalE1 :: Control.Monad.Trans.State.Lazy.State Hw2.Store Hw2.Value
  {- Strictness: b -}
56d314d40974ec1fdb79a316433c4cb8
  evalOp :: Hw2.Bop -> Hw2.Value -> Hw2.Value -> Hw2.Value
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: Hw2.Bop ds1 :: Hw2.Value ds2 :: Hw2.Value ->
                 case ds of wild {
                   DEFAULT -> Hw2.evalOp1
                   Hw2.Plus
                   -> case ds1 of wild1 {
                        Hw2.IntVal i
                        -> case ds2 of wild2 {
                             Hw2.IntVal j -> Hw2.IntVal (GHC.Num.$fNumInt_$c+ i j)
                             Hw2.BoolVal ipv -> Hw2.evalOp1 }
                        Hw2.BoolVal ipv -> Hw2.evalOp1 } }) -}
15c89e643db7369b191a95d777395c8d
  evalOp1 :: Hw2.Value
  {- Strictness: b -}
eb5fab06a6402343740f41f40657404a
  evalS ::
    Hw2.Statement -> Control.Monad.Trans.State.Lazy.State Hw2.Store ()
  {- Arity: 1, Strictness: <B,1*U>b,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Hw2.Statement ->
                 case ds of wild { DEFAULT -> Hw2.evalS1 }) -}
ef82fc643cfdaa3baa8b91c04b2dc39d
  evalS1 :: Control.Monad.Trans.State.Lazy.State Hw2.Store ()
  {- Strictness: b -}
b43d6259d8b56ca2a4811b962acc83af
  execS :: Hw2.Statement -> Hw2.Store -> Hw2.Store
  {- Strictness: b -}
ad2e3aaf74d6228de24e619a4f29174b
  exprP :: Text.Parsec.String.Parser Hw2.Expression
  {- Strictness: b -}
761afd885babf545905a536cf602832f
  intP :: Text.Parsec.String.Parser Hw2.Value
  {- Strictness: b -}
290fa39180c5c26c9765ac8c679a665d
  myEmail :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rqiu@ucsd.edu"#) -}
ed2ff2ffae50d7d416cbca2a4876f057
  myFoldl :: (a -> b -> a) -> a -> [b] -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U> -}
7e9e5fe018f804063fb7fc6db2ea832e
  myFoldl1 :: a
  {- Strictness: b -}
e4dd6850c41965e2bc7aadba472fe97f
  myFoldl2 :: (a -> b -> a) -> a -> [b] -> a
  {- Arity: 3, Strictness: <B,A><B,A><B,A>b,
     Unfolding: InlineRule (3, True, True)
                (\ @ a1 @ b f :: a1 -> b -> a1 b1 :: a1 xs :: [b] ->
                 Hw2.myFoldl1 @ a1) -}
e38f90a27cfe0971199e5bb3b513a327
  myFoldr :: (a -> b -> b) -> b -> [a] -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a1 @ b f :: a1 -> b -> b b1 :: b xs :: [a1] ->
                 letrec {
                   go :: [a1] -> b -> b {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ ds :: [a1] eta :: b ->
                     case ds of wild { [] -> eta : y ys -> go ys (f y eta) }
                 } in
                 go (Hw2.myReverse @ a1 xs) b1) -}
db5643f3babe61238e62b77f19f16bd2
  myName :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ruiqing Qiu"#) -}
2d3f2c0f42f1a7bcf3983cba82f82be8
  myReverse :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a1 xs :: [a1] ->
                 Hw2.myReverse1 @ a1 xs (GHC.Types.[] @ a1)) -}
c63cf0c785def79f059fa83d87a2e803
  myReverse1 :: [a] -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
5a1b18bf61a75052508bb05116e98790
  mySID :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "A98022702"#) -}
c34d6743768a9af863de945d5f416641
  opP :: Text.Parsec.String.Parser Hw2.Bop
  {- Strictness: b -}
77bdf16f709afbc084f7a7b57ed06bee
  run :: Hw2.Statement -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw2.run1
                  `cast`
                (<Hw2.Statement>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e058054d28484cc170b3daf01097127d
  run1 ::
    Hw2.Statement
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Hw2.Statement
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Hw2.$wa w1) -}
2e2a3fbd51f0c7950aa195f1e1bb9682
  run2 :: GHC.Base.String
  {- Unfolding: (Data.Map.Base.$fShowMap_$cshow
                   @ [GHC.Types.Char]
                   @ Hw2.Value
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Hw2.$fShowValue
                   Hw2.run3) -}
68308adbb03acb8a4720222599d5b75d
  run3 :: Data.Map.Base.Map [GHC.Types.Char] Hw2.Value
  {- Strictness: b -}
be053b3c827e9594e0b2af621ccb1184
  run4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Output Store:"#) -}
dd6e55d38601ef2a8b0f3f3e3e21514d
  runFile :: GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw2.runFile1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
47b48d9df22b60411516da5495f9abe5
  runFile1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ s :: GHC.Base.String
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        s
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ ()
                         @ Data.Functor.Identity.Identity
                         @ Hw2.Statement
                         @ GHC.Types.Char
                         (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                         Hw2.statementP
                         GHC.Tuple.()
                         s
                         ipv3)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Hw2.Statement>_R) of wild {
                   Data.Either.Left err
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Text.Parsec.Error.$fShowParseError_$cshow err)
                        GHC.Types.True
                        ipv2
                   Data.Either.Right stmt -> Hw2.$wa ipv2 } } }) -}
f24eb7e965ff1d58f972b3fe779855c7
  statementP :: Text.Parsec.String.Parser Hw2.Statement
  {- Strictness: b -}
cb1e0c17fa417f938bbf71fd7aea8175
  valueP :: Text.Parsec.String.Parser Hw2.Value
  {- Arity: 5, Strictness: <B,A><B,A><B,A><B,A><B,A>b,
     Unfolding: InlineRule (0, True, True)
                Hw2.valueP1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Hw2.Value>_R)) -}
3a121ab5269e013bcd7e4d13475ddf75
  valueP1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Hw2.Value
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Hw2.Value
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <B,A><B,A><B,A><B,A><B,A>b,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   w :: Text.Parsec.Prim.State GHC.Base.String ()
                   w1 :: Hw2.Value
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w2 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w3 :: Hw2.Value
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b ->
                 Hw2.$wa1 @ b GHC.Prim.void#) -}
8ba0898d35d5d634d7b7c89a7ee124f5
  varP :: Text.Parsec.String.Parser Hw2.Variable
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hw2.varP1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Types.Char]>_R)) -}
a1a54fb628c76aa8ed5f0227cd0f24b2
  varP1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   eta1 :: Text.Parsec.Prim.State GHC.Base.String ()
                   eta2 :: [GHC.Types.Char]
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta3 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: [GHC.Types.Char]
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Combinator.many3
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Hw2.varP2
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   eta1
                   eta2
                   eta3
                   eta4
                   eta5) -}
41148bf629b2bf3d148b5f503af7f906
  varP2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   eta :: Text.Parsec.Prim.State GHC.Base.String ()
                   eta1 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta2 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta3 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Hw2.varP4
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Hw2.varP3
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
afb289c5ffe769eabe857acf62bd2dd5
  varP3 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.upper2
                   (GHC.Types.[] @ GHC.Base.String)) -}
ea275c8483ac3d9967c04edb93d9c4b9
  varP4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   w2 :: Text.Parsec.Prim.State GHC.Base.String ()[OneShot]
                   w3 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w5 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w6 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wa
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isUpper
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
5a6c0fd29a9c621b1fe8d920509b0f16
  w_fact :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_fact32 Hw2.w_fact1) -}
40008afa2086c3f41137d30fe4555848
  w_fact1 :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_fact31 Hw2.w_fact2) -}
a0f9a5748761e932af4dda23eac16168
  w_fact10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
13d91156bcaaeca49e0a7ab0789fe397
  w_fact11 :: Hw2.Expression
  {- Strictness: m1, Unfolding: (Hw2.Var Hw2.w_fact12) -}
e3a08f0b7333a3208d525e46967872ea
  w_fact12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
2bc122724ed290c08ac900289fded1e3
  w_fact13 :: Hw2.Statement
  {- Strictness: m3,
     Unfolding: (Hw2.While Hw2.w_fact25 Hw2.w_fact14) -}
1e9a49d926884199a0323723c0c187f8
  w_fact14 :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_fact19 Hw2.w_fact15) -}
ccc461ddfdf6be654966e0757d82c855
  w_fact15 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_fact18 Hw2.w_fact16) -}
804b6135ea590bd760fd45256e7bbb4f
  w_fact16 :: Hw2.Expression
  {- Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Minus Hw2.w_fact17 Hw2.w_fact8) -}
380257875bcc5517809c19d8dbfe1c00
  w_fact17 :: Hw2.Expression
  {- Strictness: m1, Unfolding: (Hw2.Var Hw2.w_fact18) -}
27679b117b55d8ec786181e3bf9d2690
  w_fact18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "X"#) -}
0ca6dd3df9f09a31e4b2941ee5332ac3
  w_fact19 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_fact22 Hw2.w_fact20) -}
59c086e4fec804b51429370dad1521e5
  w_fact2 :: Hw2.Statement
  {- Strictness: m3,
     Unfolding: (Hw2.While Hw2.w_fact28 Hw2.w_fact3) -}
19a2749f8c32f09ae6ac9c7f57d82f12
  w_fact20 :: Hw2.Expression
  {- Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Plus Hw2.w_fact23 Hw2.w_fact21) -}
64a7ac593b6a42717cad77c36167eb78
  w_fact21 :: Hw2.Expression
  {- Strictness: m1, Unfolding: (Hw2.Var Hw2.w_fact22) -}
bc464f2312223020423ede6e584d032a
  w_fact22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
ed5621d00841ee2f8abfc8a964f62837
  w_fact23 :: Hw2.Expression
  {- Strictness: m1, Unfolding: (Hw2.Var Hw2.w_fact24) -}
926524366994338612db67a78cd1e3ab
  w_fact24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Z"#) -}
7cfd35ff50ef2b88ae77585899d58498
  w_fact25 :: Hw2.Expression
  {- Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Gt Hw2.w_fact17 Hw2.w_fact8) -}
c58d9aaf833ce93491a8e640f58e2d00
  w_fact26 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_fact24 Hw2.w_fact21) -}
b4757f31143392e11d9921fbc909c916
  w_fact27 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_fact18 Hw2.w_fact11) -}
c1b7aaba48acf369f8f3136e220f70c5
  w_fact28 :: Hw2.Expression
  {- Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Gt Hw2.w_fact11 Hw2.w_fact29) -}
7cc822fc02066f4832dbbf4a8c7fe270
  w_fact29 :: Hw2.Expression
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Hw2.Val Hw2.w_fact30) -}
35e7688b030bb8993fb5ecb0e7b36015
  w_fact3 :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_fact27 Hw2.w_fact4) -}
cc0c35c122e31d5ced6153345f77cbab
  w_fact30 :: Hw2.Value
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Hw2.IntVal Hw2.$fShowBST1) -}
41caf184721063b5cc43617148d75e61
  w_fact31 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_fact22 Hw2.w_fact8) -}
e8ce65196828e05f7afbcc6563bbf551
  w_fact32 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_fact12 Hw2.w_fact33) -}
19bbbeaf794a8f7a4a3ae14768fa8d7b
  w_fact33 :: Hw2.Expression
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Hw2.Val Hw2.w_fact34) -}
b0162037d64257a6282d9fd4851b2f76
  w_fact34 :: Hw2.Value
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Hw2.IntVal Hw2.w_fact35) -}
f2ebaf5d4d50a62257cf9cb46cb9addb
  w_fact35 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
f6cd63d743830643d56557ef190cfe17
  w_fact4 :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_fact26 Hw2.w_fact5) -}
70e6701827fd1e9a9d9480c6f9704a8d
  w_fact5 :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_fact13 Hw2.w_fact6) -}
c61baace59d59f8fe7b04d93a09cf157
  w_fact6 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_fact12 Hw2.w_fact7) -}
f31f515dd01748d65cc71d244b53aa37
  w_fact7 :: Hw2.Expression
  {- Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Minus Hw2.w_fact11 Hw2.w_fact8) -}
c66a6a7f5a5f0b64668a87b8e83a6027
  w_fact8 :: Hw2.Expression
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Hw2.Val Hw2.w_fact9) -}
68052336fb6216103d6fa3d659bef45e
  w_fact9 :: Hw2.Value
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Hw2.IntVal Hw2.w_fact10) -}
419d6be19dea1e62ad2bf72d454d1cda
  w_test :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_test10 Hw2.w_test1) -}
77b6c2b3ff1df27bad90f055b8de81d5
  w_test1 :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_test9 Hw2.w_test2) -}
d03fb9b0badff44cfba3da05a5cad623
  w_test10 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_fact18 Hw2.w_test11) -}
3c5e1662ea354a4c862cd816e185433e
  w_test11 :: Hw2.Expression
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Plus Hw2.w_test16 Hw2.w_test12) -}
9adf06f42555ad7c9556676ccc98d1c4
  w_test12 :: Hw2.Expression
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Plus Hw2.w_fact8 Hw2.w_test13) -}
a40fa0e57d3c8c67afb1b8627db96ec5
  w_test13 :: Hw2.Expression
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Hw2.Val Hw2.w_test14) -}
d4c20194aaafaf41bdecf8d83de08475
  w_test14 :: Hw2.Value
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Hw2.IntVal Hw2.w_test15) -}
1de8475e622cb6a339d11b27bdfcc4d3
  w_test15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
3062d0bcf04e68e9021f5ec0cba90213
  w_test16 :: Hw2.Expression
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Minus Hw2.w_test17 Hw2.w_test13) -}
6d1337c62ec48e94c8752caea3e84fbf
  w_test17 :: Hw2.Expression
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Plus Hw2.w_fact8 Hw2.w_fact33) -}
c8aea499137c2bb1f57e50fdcdc4316d
  w_test2 :: Hw2.Statement
  {- Strictness: m3,
     Unfolding: (Hw2.While Hw2.w_test8 Hw2.w_test3) -}
44b4d8b40d2c692b359da356aca162be
  w_test3 :: Hw2.Statement
  {- Strictness: m4,
     Unfolding: (Hw2.Sequence Hw2.w_test4 Hw2.w_fact15) -}
93ebcd62364760477d098c5a199e4900
  w_test4 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_test7 Hw2.w_test5) -}
630c7893b07c1554dfbd2061a18a16e9
  w_test5 :: Hw2.Expression
  {- Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Plus Hw2.w_test6 Hw2.w_fact17) -}
416fbdff6c506327d9ac9ae451f772d7
  w_test6 :: Hw2.Expression
  {- Strictness: m1, Unfolding: (Hw2.Var Hw2.w_test7) -}
21f9115656c15509458c1c7a1aad5653
  w_test7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Y"#) -}
4dbff68032169fcdd6ffa8ea339b504b
  w_test8 :: Hw2.Expression
  {- Strictness: m3,
     Unfolding: (Hw2.Op Hw2.Gt Hw2.w_fact17 Hw2.w_fact29) -}
185f7ed379212badb7f849466e214d7a
  w_test9 :: Hw2.Statement
  {- Strictness: m1,
     Unfolding: (Hw2.Assign Hw2.w_test7 Hw2.w_fact29) -}
instance GHC.Show.Show [Hw2.BST] = Hw2.$fShowBST
instance GHC.Show.Show [Hw2.Bop] = Hw2.$fShowBop
instance GHC.Show.Show [Hw2.Expression] = Hw2.$fShowExpression
instance GHC.Show.Show [Hw2.Statement] = Hw2.$fShowStatement
instance GHC.Show.Show [Hw2.Value] = Hw2.$fShowValue
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

